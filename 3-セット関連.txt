※#セット
 
#ユニークなデータを保持する(同じデータを入力しても無視される)
 
#セットはデータの順番を持たない(.sort,max(),min()使用不可)



#セットの作成( { } でくくる)

set_a = {1,2,3,'a','b'}


#セット内に指定した要素があるか true faise で表示

set_a_in_b = 'b' in set_a

print(set_a_in_b)

#セットの要素数を表示する

print(len(set_a))

#セットの要素追加
 
#セット.add(要素) で追加 .addにつき１つ要素を追加可能

set_b = {1,2,3,'a','b','c'}



set_b.add(4)

set_b.add('d')



{1, 2, 3, 'a', 'b', 'c'}


　　↓　こうなる　↓

{1, 2, 3, 4, 'd', 'a', 'b', 'c'}

#セット内の要素の削除
 
#セット名.remove(要素) で削除可能　※ただし指定した要素がない場合エラーになる
 

set_c = {1,2,'a',3,4}

set_c.remove("a")


{'a', 1, 2, 3, 4}

　　↓　こうなる　↓

{1, 2, 3, 4}

※ここで set_c.remove("c") とかやるとエラーが出る

#セット内の要素の削除　卍便利版卍
 
 #セット名.discard(要素) 「指定した要素がセット何内にあれば削除する」という便利なやつ


set_d = {1,2,'a','b',3,4}


set_d.discard("a")

set_d.discard("d")



{1, 2, 3, 4, 'a', 'b'}

　　↓　こうなる　↓

{1, 2, 3, 4, 'b'}
"a"は消えているし"d"を指定しているがエラーは出ない

#セットの合併 ユニオン
 
 #指定した複数セットから重複要素を省き１つのセットにする
 
 #セット名１.union(セット名２、セット名３)

set_e = {1,2,3,4,"a","b"}

set_f = {1,2,5,6,"a","c"}

set_g = {1,3,7,8,"b","d"}


set_union_efg = set_e.union(set_f,set_g)



print(set_union_efg)


　　↓　こうなる　↓

{'b', 2, 3, 4, 1, 5, 6, 7, 8, 'a', 'c', 'd'}

#セットの重複要素の抽出　インターセクション
 
#セット名１.intersection(セット名２,セット名３)

set_h = {1,2,3,4,"a","b"}

set_i = {1,2,5,6,"a","c"}

set_j = {1,3,7,8,"b","d"}



set_intersection_hij = set_h.intersection(set_i,set_j)


print(set_intersection_hij)


　　↓　こうなる　↓

{1}
※セットh,i,jで重複しているものが 1 しかない

#セットの差分集合　ディファレンス
 
 #セット名１.difference(セット名２,セット名３)
 
 #セット名１に存在し、他のセットに存在しない差分の要素を抽出する

set_k = {1,2,3,4,"a","b"}

set_l = {1,2,5,6,"a","c"}

set_m = {1,3,7,8,"b","d"}



set_difference_klm = set_k.difference(set_l,set_m)



print(set_difference_klm)


　　↓　こうなる　↓

{4}
set_kに存在し、set_l、set_mに存在しないものが ４ しかない

#シンメトリックディファレンス

 #セット名１.symmetric_difference(セット名２)

 #指定した２つのセットそれぞれにしか存在しない要素を抽出

 #指定できる要素は2つだけ

set_n = {1,2,3,4,"a","b"}

set_o = {1,3,7,8,"b","d"}



set_symmetric_difference_no = set_n.symmetric_difference(set_o)



print(set_symmetric_difference_no)

　　↓　こうなる　↓

{2, 'a', 4, 7, 8, 'd'}
※set_nとset_o、それぞれにしか存在しない要素が表示される

#スーパーセット、サブセット

 #set_pとset_qの要素が一致している場合
 #set_pはset_qのスーパーセット
 #set_qはset_pのサブセットという
set_p = {1,2,3,4,"a","b"}

set_q = {1,2,3,4,"a","b"}



print(set_p.issuperset(set_q))


　　↓　こうなる　↓

True

print(set_q.issubset(set_p))


　　↓　こうなる　↓

True
